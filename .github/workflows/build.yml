name: Build

on:
  repository_dispatch:
    types: [ test_doc ]
  pull_request:
    branches:
      - develop

jobs:

#  build-back:
#    name: Build tesler
#    runs-on: ubuntu-latest
#    if: github.event.client_payload.back.repository != ''
#    steps:
#      - name: Back triggered
#        run: |
#          echo "${{ toJSON(github.event.client_payload.back) }}"

  build-front:
    name: Build @tesler-ui/core
    runs-on: ubuntu-latest
    if: github.event.client_payload.front.repository != ''
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.front.repository }}
          ref: ${{ github.event.client_payload.front.branch }}
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
          always-auth: true
      - name: install
        run: yarn install
      - name: pack
        id: pack
        run: |
          front_tgz_name=`yarn pack | sed -n 2p | sed 's/.*tarball to \(.*\)\./\1/' | cut -d'"' -f 2 | sed 's/.*\///'`;
          echo "front package path is: $front_tgz_name";
          echo "##[set-output name=front_package_path;]$front_tgz_name"
      - name: Make front artifact dir
        run: |
          mkdir -p artifacts/front
          mv ${{ steps.pack.outputs.front_package_path }} artifacts/front
      - uses: actions/upload-artifact@v2
        with:
          name: front-artifact
          path: artifacts/front/${{ steps.pack.outputs.front_package_path }}

#      - name: Test
#        run: tar zxvf artifacts/front/${{ steps.pack.outputs.front_package_path }}
    outputs:
      front_package_path: ${{ steps.pack.outputs.front_package_path }}

  build:
    name: Build tesler-doc
    runs-on: ubuntu-latest
    environment: build
    env:
      TOKEN: ${{ secrets.DOCKER_TOKEN }}
      USERNAME: ${{ secrets.DOCKER_USERNAME }}
    if: always()
    needs: [build-front]
    # Docker Hub image that `container-job` executes in
#    container: node:10.18-jessie

#    # Service containers to run with `container-job`
#    services:
#      # Label used to access the service container
#      postgres:
#        # Docker Hub image
#        image: postgres
#        # Provide the password for postgres
#        env:
#          POSTGRES_PASSWORD: postgres
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          # Maps tcp port 5432 on service container to the host
#          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        if: github.event.client_payload.back.repository != ''
        with:
          repository: ${{ github.event.client_payload.back.repository }}
          ref: ${{ github.event.client_payload.back.branch }}
      - name: Build tesler
        if: github.event.client_payload.back.repository != ''
        run: |
          mvn versions:set -DnewVersion=test-test
          mvn --batch-mode clean install
      - uses: actions/checkout@v2
        with:
          ref: develop
      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
          always-auth: true
      - uses: actions/download-artifact@master
        if: needs.build-front.outputs.front_package_path != ''
        with:
          name: front-artifact
          path: artifacts/front/ #${{ needs.build-front.outputs.front_package_path }}
      - name: Set front dependency
        if: needs.build-front.outputs.front_package_path != ''
        run: |
          ls -la ./artifacts/front/
          yarn add file:../artifacts/front/${{ needs.build-front.outputs.front_package_path }} --cwd tesler-doc-ui/
      - name: Maven Verify with local tesler
        if: github.event.client_payload.back.repository != ''
        run: mvn clean verify -P Dev,UI -D tesler.version=test-test
      - name: Maven Verify
        if: github.event.client_payload.back.repository == ''
        run: mvn clean verify -P Dev,UI
      - name: Create and publish Docker container
        id: container
        run: |
          rep=`echo "${{ github.repository }}" | awk '{print tolower($0)}'`
          echo "##[set-output name=container_name;]$rep"
          echo "##[set-output name=container_tag;]${{ github.run_id }}"
          docker login -u $USERNAME -p $TOKEN
          docker build -t $rep:latest -t $rep:${{ github.run_id }} ./tesler-doc-app/
          docker push $rep
    outputs:
      container_name: ${{ steps.container.outputs.container_name }}
      container_tag: ${{ steps.container.outputs.container_tag }}

  run-tests:
    name: Run autotests
    runs-on: ubuntu-latest
    environment: build
    needs: [build]
    # Service containers to run with `container-job`
#    services:
#      tesler-doc:
#        image: ${{ needs.build.outputs.container_name }}
#      # Label used to access the service container
#      postgres:
#        # Docker Hub image
#        image: postgres
#        # Provide the password for postgres
#        env:
#          POSTGRES_PASSWORD: postgres
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
    steps:
      - name: display some info
        run: |
          echo "${{ needs.build.outputs.container_name }}"
          echo "${{ needs.build.outputs.container_tag }}"
